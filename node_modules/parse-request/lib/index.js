"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ObjectId = require('bson-objectid');

var Url = require('url-parse');

var convertHrtime = require('convert-hrtime');

var cookie = require('cookie');

var creditCardType = require('credit-card-type');

var debug = require('debug')('parse-request');

var hrtime = require('browser-hrtime');

var httpHeaders = require('http-headers');

var isArrayBuffer = require('is-array-buffer');

var isBuffer = require('is-buffer');

var isStream = require('is-stream');

var isUUID = require('is-uuid');

var ms = require('ms');

var noCase = require('no-case');

var querystring = require('qs');

var rfdc = require('rfdc');

var safeStringify = require('fast-safe-stringify');

var sensitiveFields = require('sensitive-fields'); // https://github.com/cabinjs/request-received


var startTime = Symbol.for('request-received.startTime');
var pinoHttpStartTime = Symbol.for('pino-http.startTime');
var disableBodyParsingSymbol = Symbol.for('parse-request.disableBodyParsing');
var disableQueryParsingSymbol = Symbol.for('parse-request.disableQueryParsing');
var disableFileParsingSymbol = Symbol.for('parse-request.disableFileParsing');
var hashMapIds = {
  _id: true,
  id: true
};
var regexId = /_id$/;

function maskArray(obj, options) {
  var arr = [];

  var _iterator = _createForOfIteratorHelper(obj.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          i = _step$value[0],
          element = _step$value[1];

      arr[i] = maskSpecialTypes(element, options);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return arr;
}

function maskSpecialTypes(obj, options) {
  options = Object.assign({
    maskBuffers: true,
    maskStreams: true,
    checkObjectId: true
  }, options);
  if (_typeof(obj) !== 'object') return obj; // we need to return an array if passed an array

  if (Array.isArray(obj)) return maskArray(obj, options); // if it was a bson objectid return early

  if (options.checkObjectId && ObjectId.isValid(obj)) return obj.toString(); // check if it was a stream

  if (options.maskStreams && isStream(obj)) return {
    type: 'Stream'
  }; // check if it was a buffer or array buffer
  // before iterating over the object's keys

  if (options.maskBuffers) {
    if (isBuffer(obj)) return {
      type: 'Buffer',
      byteLength: obj.byteLength
    };
    if (isArrayBuffer(obj)) return {
      type: 'ArrayBuffer',
      byteLength: obj.byteLength
    };
  } // we need to return an object if passed an object


  var masked = {}; // for...in is much faster than Object.entries or any alternative
  // TODO: we should optimize this further in the future

  for (var key in obj) {
    if (_typeof(obj[key]) === 'object') {
      if (Array.isArray(obj[key])) {
        masked[key] = maskSpecialTypes(obj[key], options);
      } else if (options.maskStreams && isStream(obj[key])) {
        masked[key] = {
          type: 'Stream'
        };
      } else if (options.maskBuffers && isBuffer(obj[key])) {
        masked[key] = {
          type: 'Buffer',
          byteLength: obj[key].byteLength
        };
      } else if (options.maskBuffers && isArrayBuffer(obj[key])) {
        masked[key] = {
          type: 'ArrayBuffer',
          byteLength: obj[key].byteLength
        };
      } else {
        masked[key] = maskSpecialTypes(obj[key], options);
      }
    } else {
      masked[key] = obj[key];
    }
  }

  return masked;
}

function pick(object, keys) {
  return keys.reduce(function (obj, key) {
    if (object && Object.prototype.hasOwnProperty.call(object, key)) {
      obj[key] = object[key];
    }

    return obj;
  }, {});
}

function isNull(val) {
  return val === null;
}

function isUndefined(val) {
  return typeof val === 'undefined';
}

function isObject(val) {
  return _typeof(val) === 'object' && val !== null && !Array.isArray(val);
}

function isString(val) {
  return typeof val === 'string';
} // <https://github.com/braintree/credit-card-type/issues/90>


function isCreditCard(val) {
  var digits = val.replace(/\D/g, '');
  var types = creditCardType(digits);
  if (!Array.isArray(types) || types.length === 0) return false;
  var match = false;

  var _iterator2 = _createForOfIteratorHelper(types),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var type = _step2.value;
      if (match) break; // can match any one of the lengths

      if (!Array.isArray(type.lengths) || type.lengths.length === 0) continue;

      for (var l = 0; l < type.lengths.length; l++) {
        var len = type.lengths[l];

        if (Number.isFinite(len) && len === digits.length) {
          match = true;
          break;
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return match;
}

function isID(val, options) {
  // if it was an objectid return early
  if (options.checkObjectId && ObjectId.isValid(val)) return true; // if it was a cuid return early
  // <https://github.com/ericelliott/cuid/issues/88#issuecomment-339848922>

  if (options.checkCuid && val.indexOf('c') === 0 && val.length >= 7) return true; // if it was a uuid v1-5 return early

  if (options.checkUUID && isUUID.anyNonNil(val)) return true;
  return false;
}

function maskString(key, val, props, options) {
  var isKeyString = isString(key);

  if (options.isHeaders) {
    // headers are case-insensitive
    props = props.map(function (prop) {
      return prop.toLowerCase();
    });

    if (props.includes('referer') || props.includes('referrer')) {
      if (!props.includes('referer')) props.push('referer');
      if (!props.includes('referrer')) props.push('referrer');
    }
  }

  var notIncludedInProps = !isKeyString || !props.includes(key);

  if (!options.isHeaders) {
    // check if it closely resembles a primary ID and return early if so
    if (isKeyString && options.checkId) {
      // _id
      // id
      // ID
      // Id
      if (hashMapIds[key.toLowerCase()]) return val; // product_id
      // product-id
      // product[id]
      // productId
      // productID

      var snakeCase = noCase(key, null, '_');
      if (regexId.test(snakeCase)) return val;
    } // if it was an objectid, cuid, or uuid return early


    if (isID(val, options) && notIncludedInProps) return val; // if it was a credit card then replace all digits with asterisk

    if (options.maskCreditCards && isCreditCard(val)) return val.replace(/[^\D\s]/g, '*');
  }

  if (notIncludedInProps) return val; // replace only the authentication <credentials> portion with asterisk
  // Authorization: <type> <credentials>

  if (options.isHeaders && key === 'authorization') return "".concat(val.split(' ')[0], " ").concat(val.slice(val.indexOf(' ') + 1).replace(/./g, '*'));
  return val.replace(/./g, '*');
}

function headersToLowerCase(headers) {
  if (_typeof(headers) !== 'object' || Array.isArray(headers)) return headers;
  var lowerCasedHeaders = {};

  for (var header in headers) {
    if (isString(headers[header])) lowerCasedHeaders[header.toLowerCase()] = headers[header];
  }

  return lowerCasedHeaders;
}

function maskProps(obj, props, options) {
  options = Object.assign({
    maskCreditCards: true,
    isHeaders: false,
    checkId: true,
    checkCuid: true,
    checkObjectId: true,
    checkUUID: true
  }, options);
  if (isString(obj)) return maskString(null, obj, props, options); // for...in is much faster than Object.entries or any alternative

  for (var key in obj) {
    if (_typeof(obj[key]) === 'object') obj[key] = maskProps(obj[key], props, options);else if (isString(obj[key])) obj[key] = maskString(key, obj[key], props, options);
  }

  return obj;
} // inspired by raven's parseRequest
// eslint-disable-next-line complexity


var parseRequest = function parseRequest() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var start = hrtime();
  var id = new ObjectId();
  config = Object.assign({
    req: false,
    ctx: false,
    responseHeaders: '',
    userFields: ['id', 'email', 'full_name', 'ip_address'],
    sanitizeFields: sensitiveFields,
    sanitizeHeaders: ['authorization'],
    maskCreditCards: true,
    maskBuffers: true,
    maskStreams: true,
    checkId: true,
    checkCuid: true,
    checkObjectId: true,
    checkUUID: true,
    // <https://github.com/davidmarkclements/rfdc>
    rfdc: {
      proto: false,
      circles: false
    },
    parseBody: true,
    parseQuery: true,
    parseFiles: true
  }, config);
  var clone = rfdc(config.rfdc);
  var _config = config,
      req = _config.req,
      ctx = _config.ctx,
      responseHeaders = _config.responseHeaders,
      userFields = _config.userFields,
      sanitizeFields = _config.sanitizeFields,
      sanitizeHeaders = _config.sanitizeHeaders,
      maskCreditCards = _config.maskCreditCards,
      maskBuffers = _config.maskBuffers,
      maskStreams = _config.maskStreams,
      checkId = _config.checkId,
      checkCuid = _config.checkCuid,
      checkObjectId = _config.checkObjectId,
      checkUUID = _config.checkUUID,
      parseBody = _config.parseBody,
      parseQuery = _config.parseQuery,
      parseFiles = _config.parseFiles; // do not allow both `req` and `ctx` to be specified

  if (req && ctx) throw new Error('You must either use `req` (Express/Connect) or `ctx` (Koa) option, but not both');
  var nodeReq = ctx ? ctx.req : req ? req : {};
  var maskPropsOptions = {
    maskCreditCards: maskCreditCards,
    checkId: checkId,
    checkCuid: checkCuid,
    checkObjectId: checkObjectId,
    checkUUID: checkUUID
  };
  var maskSpecialTypesOptions = {
    maskBuffers: maskBuffers,
    maskStreams: maskStreams,
    checkObjectId: checkObjectId
  };
  var requestHeaders = nodeReq.headers;
  var headers;
  if (requestHeaders) headers = maskProps(headersToLowerCase(requestHeaders), sanitizeHeaders, {
    isHeaders: true
  });
  var method;
  if (ctx) method = ctx.method;else if (req) method = req.method; // inspired from `preserve-qs` package

  var originalUrl;
  if (ctx) originalUrl = ctx.originalUrl || ctx.url;else if (req) originalUrl = req.originalUrl || req.url;
  var query;
  var absoluteUrl;

  if (originalUrl) {
    originalUrl = new Url(originalUrl, {}); // parse query, path, and origin to prepare absolute Url

    query = Url.qs.parse(originalUrl.query);
    var path = originalUrl.origin === 'null' ? originalUrl.pathname : "".concat(originalUrl.origin).concat(originalUrl.pathname);
    var qs = Url.qs.stringify(query, true);
    absoluteUrl = path + qs;
  } // default to the user object


  var user = {};
  var parsedUser;
  if (ctx && isObject(ctx.state.user)) parsedUser = ctx.state.user;else if (req && isObject(req.user)) parsedUser = req.user;

  if (parsedUser) {
    try {
      user = typeof parsedUser.toJSON === 'function' ? parsedUser.toJSON() : typeof parsedUser.toObject === 'function' ? parsedUser.toObject() : clone(parsedUser);
    } catch (err) {
      debug(err);

      try {
        user = JSON.parse(safeStringify(parsedUser));
      } catch (err) {
        debug(err);
      }
    }
  }

  var ip = ctx ? ctx.ip : req ? req.ip : null;
  if (ip && !isString(user.ip_address)) user.ip_address = ip;
  if (user && Array.isArray(userFields) && userFields.length > 0) user = pick(user, userFields); // recursively search through user and filter out passwords from it

  if (user) user = maskProps(user, sanitizeFields, maskPropsOptions);
  var body;
  var originalBody = ctx ? ctx.request._originalBody || ctx.request.body : req ? req._originalBody || req.body : null;

  if (originalBody && parseBody && !nodeReq[disableBodyParsingSymbol]) {
    //
    // recursively search through body and filter out passwords from it
    // <https://github.com/niftylettuce/frisbee/issues/68>
    // <https://github.com/bitinn/node-fetch/blob/master/src/request.js#L75-L78>
    //
    if (!['GET', 'HEAD'].includes(method) && !isUndefined(originalBody)) body = clone(maskBuffers || maskStreams ? maskSpecialTypes(originalBody, maskSpecialTypesOptions) : originalBody);
    body = maskProps(body, sanitizeFields, maskPropsOptions);
    if (!isUndefined(body) && !isNull(body) && !isString(body)) body = safeStringify(body);
  } // parse the cookies (if any were set)


  var cookies;
  if (headers && headers.cookie) cookies = cookie.parse(headers.cookie);
  var result = {
    id: id.toString(),
    //
    // NOTE: regarding the naming convention of `timestamp`, it seems to be the
    // most widely used and supported property name across logging services
    //
    timestamp: id.getTimestamp().toISOString()
  };
  if (ctx || req) result.request = {};
  if (method) result.request.method = method;
  if (headers) result.request.headers = headers;
  if (cookies) result.request.cookies = cookies;
  if (absoluteUrl) result.request.url = absoluteUrl;
  if (user) result.user = user;

  if (query) {
    if (parseQuery && !nodeReq[disableQueryParsingSymbol]) query = maskProps(querystring.parse(query), sanitizeFields);
    result.request.query = query;
  }

  if (originalBody && parseBody && body && !nodeReq[disableBodyParsingSymbol]) result.request.body = body; //
  // Also note that there is no standard for setting a request received time.
  //
  // Examples:
  //
  // 1) koa-req-logger uses `ctx.start`
  // <https://github.com/DrBarnabus/koa-req-logger/blob/master/src/index.ts#L198>
  //
  // 2) morgan uses `req._startAt` and `req._startTime` which are not
  // req._startAt = process.hrtime()
  // req._startTime = new Date()
  // <https://github.com/expressjs/morgan/blob/master/index.js#L500-L508>
  //
  // 3) pino uses `Symbol('startTime')` but it does not expose it easily
  // <https://github.com/pinojs/pino-http/issues/65>
  //
  // 4) response-time does not expose anything
  // <https://github.com/expressjs/response-time/pull/18>
  //
  // Therefore we created `request-received` middleware that is required
  // to be used in order for `request.timestamp` to be populated with ISO-8601
  // <https://github.com/cabinjs/request-received>
  //
  // We also opened the following PR's in an attempt to make this a drop-in:
  //
  // * https://github.com/pinojs/pino-http/pull/67
  // * https://github.com/expressjs/morgan/pull/201
  // * https://github.com/expressjs/response-time/pull/20
  // * https://github.com/DataDog/node-connect-datadog/pull/7
  // * https://github.com/DrBarnabus/koa-req-logger/pull/2
  //
  // add request.timestamp (parse req[$x] variable)

  if (nodeReq[startTime] instanceof Date) result.request.timestamp = nodeReq[startTime].toISOString();else if (typeof nodeReq[startTime] === 'number') result.request.timestamp = new Date(nodeReq[startTime]).toISOString();else if (typeof nodeReq[pinoHttpStartTime] === 'number') result.request.timestamp = new Date(nodeReq[pinoHttpStartTime]).toISOString();else if (nodeReq._startTime instanceof Date) result.request.timestamp = nodeReq._startTime.toISOString();else if (typeof nodeReq._startTime === 'number') result.request.timestamp = new Date(nodeReq._startTime).toISOString(); //
  // conditionally add a `response` object if and only if
  // `responseHeaders` option was passed, and it was a non-empty string or object
  //

  if (isObject(responseHeaders) && Object.keys(responseHeaders).length > 0) {
    result.response = {};
    result.response.headers = clone(responseHeaders);
  } else if (isString(responseHeaders)) {
    // <https://github.com/nodejs/node/issues/28302>
    var parsedHeaders = httpHeaders(responseHeaders);
    result.response = {};

    if (isObject(parsedHeaders.headers)) {
      result.response.headers = parsedHeaders.headers; // parse the status line
      // <https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1>

      if (isObject(parsedHeaders.version) && typeof parsedHeaders.version.major === 'number' && typeof parsedHeaders.version.minor === 'number') result.response.http_version = "".concat(parsedHeaders.version.major, ".").concat(parsedHeaders.version.minor);
      if (typeof parsedHeaders.statusCode === 'number') result.response.status_code = parsedHeaders.statusCode;
      if (isString(parsedHeaders.statusMessage)) result.response.reason_phrase = parsedHeaders.statusMessage;
    } else {
      result.response.headers = parsedHeaders;
    }
  }

  if (result.response && result.response.headers) {
    result.response.headers = maskProps(headersToLowerCase(result.response.headers), sanitizeHeaders, {
      isHeaders: true
    });

    if (result.response.headers && Object.keys(result.response.headers).length === 0) {
      delete result.response;
    } else {
      // add response.timestamp (response Date header)
      try {
        if (result.response.headers.date) result.response.timestamp = new Date(result.response.headers.date).toISOString();
      } catch (err) {
        debug(err);
      } // add response.duration (parsed from response X-Response-Time header)


      try {
        if (result.response.headers['x-response-time']) {
          var duration = ms(result.response.headers['x-response-time']);
          if (typeof duration === 'number') result.response.duration = duration;
        }
      } catch (err) {
        debug(err);
      }
    }
  } // add request's id if available from `req.id`


  var requestId;

  if (ctx) {
    if (isString(ctx.id)) requestId = ctx.id;else if (isString(ctx.request.id)) requestId = ctx.request.id;else if (isString(ctx.req.id)) requestId = ctx.req.id;else if (isString(ctx.state.reqId)) requestId = ctx.state.reqId;else if (isString(ctx.state.id)) requestId = ctx.state.id;
  } else if (req && isString(req.id)) {
    requestId = req.id;
  } // TODO: we should probably validate this id somehow
  // (e.g. like we do with checking if cuid or uuid or objectid)


  if (requestId) result.request.id = requestId;else if (headers && headers['x-request-id']) result.request.id = headers['x-request-id']; // add httpVersion if possible (server-side only)

  var httpVersion = nodeReq.httpVersion,
      httpVersionMajor = nodeReq.httpVersionMajor,
      httpVersionMinor = nodeReq.httpVersionMinor;
  if (isString(httpVersion)) result.request.http_version = httpVersion;else if (typeof httpVersionMajor === 'number' && typeof httpVersionMinor === 'number' || isString(httpVersionMajor) && isString(httpVersionMinor)) result.request.http_version = "".concat(httpVersionMajor, ".").concat(httpVersionMinor); // parse `req.file` and `req.files` for multer v1.x and v2.x

  if (parseFiles && !nodeReq[disableFileParsingSymbol]) {
    // koa-multer@1.x binded to `ctx.req`
    // and then koa-multer was forked by @niftylettuce to @koajs/multer
    // and the 2.0.0 release changed it so it uses `ctx.file` and `ctx.files`
    // (so it doesn't bind to the `ctx.req` Node original request object
    // <https://github.com/koa-modules/multer/pull/15>
    var file;
    var files;

    if (ctx) {
      file = ctx.file || ctx.request.file || ctx.req.file;
      files = ctx.files || ctx.request.files || ctx.req.files;
    } else if (req) {
      file = req.file;
      files = req.files;
    }

    if (_typeof(file) === 'object') result.request.file = safeStringify(clone(maskSpecialTypes(file, maskSpecialTypesOptions)));
    if (_typeof(files) === 'object') result.request.files = safeStringify(clone(maskSpecialTypes(files, maskSpecialTypesOptions)));
  }

  result.duration = convertHrtime(hrtime(start)).milliseconds;
  return result;
};

module.exports = parseRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,