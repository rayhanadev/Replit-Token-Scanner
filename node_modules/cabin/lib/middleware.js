"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var onFinished = require('on-finished');

var parseRequest = require('parse-request');

var _require = require('./utils'),
    isFunction = _require.isFunction,
    isUndefined = _require.isUndefined;

module.exports = function () {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var isExpress = !isUndefined(args[2]) && isFunction(args[2]);
  var request = isExpress ? args[0] : args[0].req;
  var res = isExpress ? args[1] : args[0].res; // const request = isExpress ? args[0] : args[0].request;
  // const response = isExpress ? args[1] : args[0].response;

  var ctx = args[0];
  var next = isExpress ? args[2] : args[1];
  var logger = {}; //
  // Note that `params` is not named `args` because ESLint doesn't warn:
  // <https://github.com/eslint/eslint/issues/11915>
  //

  var _iterator = _createForOfIteratorHelper(Object.keys(this.logger).filter(function (key) {
    return isFunction(_this.logger[key]);
  })),
      _step;

  try {
    var _loop = function _loop() {
      var key = _step.value;

      logger[key] = function () {
        var _this$logger;

        for (var _len2 = arguments.length, parameters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          parameters[_key2] = arguments[_key2];
        }

        parameters[1] = isUndefined(parameters[1]) ? {} : _this.parseArg(parameters[1]); // add `request` object to metadata

        Object.assign(parameters[1], parseRequest(Object.assign(isExpress ? {
          req: request
        } : {
          ctx: ctx
        }, //
        // this symbol was not added until Node v7.7.0
        // and we try to support Node v6.4+
        // <https://github.com/nodejs/node/issues/17745>
        //
        // <https://github.com/nodejs/node/blob/v7.10.0/lib/_http_outgoing.js#L379-L380>
        // <https://github.com/nodejs/node/blob/v7.7.0/lib/_http_outgoing.js#L379-L380>
        // <https://github.com/nodejs/node/blob/v6.4.0/lib/_http_outgoing.js#L351-L352>
        //
        // Note that for the fallback `_headers` all the keys are lowercased
        //
        // But note that in node v12.4.0 for instance this prop is deprecated
        // <https://github.com/nodejs/node/blob/v12.4.0/lib/_http_outgoing.js#L116>
        // So we are left with either the Symbol or use of `getHeaders`
        //
        // HOWEVER automatic properties like Date header aren't
        // set when you do `getHeaders`, they are only written to `_header`
        // and so we need `parse-request` to parse the `responseHeaders`
        // as a String using `http-headers`...
        // <https://github.com/nodejs/node/issues/28302>
        //
        // note that HTTP2 responses do not have a String value
        // for `res._header`, and instead is a Boolean value
        // <https://github.com/nodejs/node/issues/30894>
        // <https://github.com/cabinjs/cabin/issues/133>
        {
          responseHeaders: typeof res._header === 'string' ? res._header : typeof res.getHeaders === 'function' ? res.getHeaders() : null
        }, _this.config.parseRequest)));
        return (_this$logger = _this.logger)[key].apply(_this$logger, _toConsumableArray(Array.prototype.slice.call(parameters)));
      };
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    } // upon completion of a response we need to log it

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  onFinished(res, function (err) {
    if (err) logger.error(err);
    var level = 'info';
    if (res.statusCode >= 500) level = 'error';else if (res.statusCode >= 400) level = 'warn';

    var message = _this.config.message(Object.assign({
      level: level,
      req: request,
      res: res
    }, isExpress ? {} : {
      ctx: args[0]
    }));

    if (err) logger[level](message, {
      err: err
    });else logger[level](message);
  }); // add `log` (shorthand) and `logger` methods
  // `req.log`
  // `res.log`
  // `ctx.req`
  // `ctx.res`
  // `ctx.request`
  // `ctx.response`
  // <https://github.com/pinojs/koa-pino-logger/issues/14>
  // <https://github.com/pinojs/koa-pino-logger/blob/master/logger.js#L11>
  // <https://github.com/pinojs/pino-http/blob/master/logger.js#L55>

  if (isExpress) {
    request.log = logger;
    res.log = logger;
    request.logger = logger;
    res.logger = logger;
  } else {
    var _ctx = args[0];
    _ctx.log = logger;
    _ctx.logger = logger;
    _ctx.request.log = logger;
    _ctx.request.logger = logger;
    _ctx.response.log = logger;
    _ctx.response.logger = logger;
  }

  return next();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,