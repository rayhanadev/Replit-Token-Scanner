"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Axe = require('axe');

var isError = require('iserror');

var parseErr = require('parse-err');

var _require = require('./utils'),
    isEmpty = _require.isEmpty,
    isNull = _require.isNull,
    isUndefined = _require.isUndefined,
    isObject = _require.isObject,
    isString = _require.isString,
    isFunction = _require.isFunction;

var message = require('./message');

var middleware = require('./middleware');

var Cabin = /*#__PURE__*/function () {
  function Cabin(config) {
    var _this = this;

    _classCallCheck(this, Cabin);

    this.config = Object.assign({
      key: '',
      capture: null,
      axe: {},
      logger: null,
      meta: {},
      // <https://github.com/niftylettuce/parse-request>
      parseRequest: {},
      // <https://github.com/niftylettuce/parse-err>
      errorProps: [],
      // function that accepts (level, req, res) and returns a string
      // (this is consumed by the cabin middleware and not available in browsers)
      message: message
    }, config); // override key with root key in case user forgot

    if (!isEmpty(this.config.axe) && this.config.key) this.config.axe.key = this.config.key;
    if (!isEmpty(this.config.axe) && typeof this.config.capture === 'boolean') this.config.axe.capture = this.config.capture;
    if (!isEmpty(this.config.axe)) this.config.logger = new Axe(this.config.axe);else if (this.config.key || this.config.capture) this.config.logger = new Axe(Object.assign(this.config.key ? {
      key: this.config.key
    } : {}, this.config.capture ? {
      capture: this.config.capture
    } : {}));else if (!isObject(this.config.logger)) this.config.logger = new Axe(); // bind the logger

    this.logger = this.config.logger; // parse arg helper

    this.parseArg = this.parseArg.bind(this); // bind helper functions for each log level

    var _iterator = _createForOfIteratorHelper(Object.keys(this.logger).filter(function (key) {
      return isFunction(_this.logger[key]);
    })),
        _step;

    try {
      var _loop = function _loop() {
        var level = _step.value;

        _this[level] = function () {
          var _this$logger;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (args[1]) args[1] = _this.parseArg(args[1]);

          (_this$logger = _this.logger)[level].apply(_this$logger, _toConsumableArray(Array.prototype.slice.call(args)));
        };
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      } // aliases

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    this.err = this.error;
    this.warning = this.warn; // we'd use `auto-bind` package but unfortunately it
    // doesn't have a compiled version without `const` etc

    this.setMeta = this.setMeta.bind(this);
    this.setUser = this.setUser.bind(this);
    if (isFunction(middleware)) this.middleware = middleware.bind(this);
  }

  _createClass(Cabin, [{
    key: "parseArg",
    value: function parseArg() {
      var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (isObject(arg)) {
        Object.assign(arg, this.config.meta);
        return arg;
      }

      if (isUndefined(arg) || isNull(arg)) arg = {};else if (isError(arg)) arg = {
        err: parseErr(arg, this.config.errorProps)
      };else if (Array.isArray(arg)) arg = {
        value: arg
      };else if (isString(arg)) arg = {
        value: arg
      };else if (typeof arg === 'number') arg = {
        value: arg
      };else if (isFunction(arg)) arg = {
        value: arg.toString()
      };else arg = {};
      Object.assign(arg, this.config.meta);
      return arg;
    }
  }, {
    key: "setMeta",
    value: function setMeta() {
      var meta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.config.meta = meta;
    }
  }, {
    key: "setUser",
    value: function setUser() {
      var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.config.meta.user = user;
    }
  }]);

  return Cabin;
}();

module.exports = Cabin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,